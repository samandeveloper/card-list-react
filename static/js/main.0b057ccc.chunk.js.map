{"version":3,"sources":["data.js","reducer.js","context.js","Navbar.js","CartItem.js","CartContainer.js","App.js","index.js"],"names":["id","title","price","img","amount","reducer","state","action","type","cart","filter","cartItem","payload","reduce","cartTotal","itemTotal","total","parseFloat","toFixed","loading","tempCart","map","Error","AppContext","React","createContext","AppProvider","children","fetchData","a","dispatch","fetch","response","json","useEffect","initialState","cartItems","useReducer","Provider","value","clearCart","remove","toggleAmount","useGlobalContext","useContext","Navbar","className","xmlns","viewBox","d","CartItem","src","alt","onClick","CartContainer","length","item","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b057ccc.chunk.js","sourcesContent":["export default [\r\n  {\r\n    id: 1,\r\n    title: 'Samsung Galaxy S7',\r\n    price: 599.99,\r\n    img:\r\n      'https://res.cloudinary.com/diqqf3eq2/image/upload/v1583368215/phone-2_ohtt5s.png',\r\n    amount: 1,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'google pixel ',\r\n    price: 499.99,\r\n    img:\r\n      'https://res.cloudinary.com/diqqf3eq2/image/upload/v1583371867/phone-1_gvesln.png',\r\n    amount: 1,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Xiaomi Redmi Note 2',\r\n    price: 699.99,\r\n    img:\r\n      'https://res.cloudinary.com/diqqf3eq2/image/upload/v1583368224/phone-3_h2s6fo.png',\r\n    amount: 1,\r\n  },\r\n];\r\n","// in the reducer function, state is the state before update and action is what we are trying to do\r\n//reducer function is as same as redux reducer function\r\nconst reducer = (state,action) =>{\r\n    //remove all the list\r\n    if(action.type === \"CLEAR_CART\"){\r\n        //Note:we have other value as well in the initialState--bring all the state and change cart\r\n        return({...state, cart:[]})\r\n    }\r\n    //remove single item (cartItem)\r\n    if(action.type === \"REMOVE\"){\r\n        return({\r\n            ...state,\r\n            cart: state.cart.filter((cartItem)=>{\r\n                return(cartItem.id !== action.payload)\r\n            })\r\n        })\r\n    }\r\n\r\n    //reduce method reduces the number of values in an array--it receives two parameter and an accumulator (by default it is 0)\r\n    if(action.type === 'GET_TOTALS'){\r\n        //the below line must be let since we want to change it \r\n        let {total,amount} = state.cart.reduce((cartTotal, cartItem)=>{  //NOTE:cartTotal is the object of {total,amount}\r\n            const{price,amount} = cartItem;  //this comes from data.js\r\n\r\n            //find the total on the UI (bottom right)\r\n            const itemTotal = price*amount\r\n            cartTotal.total += itemTotal\r\n\r\n            //this will add/substract amount to the top right navbar--initial amount is 3 since we have 3 items\r\n            cartTotal.amount += amount  \r\n            return cartTotal\r\n        },{//total and amount are accumulators (first values)\r\n            total: 0,\r\n            amount:0\r\n        })\r\n        //fix the total number to two numbers after the .\r\n        total = parseFloat(total.toFixed(2))   //parseFloat(string) converts to string and return a floating point number\r\n        return{...state,total,amount}  \r\n    }\r\n\r\n    //for API:\r\n    if(action.type === \"LOADING\"){\r\n        return {...state, loading:true}\r\n    }\r\n    if(action.type === \"DISPLAY_ITEMS\"){\r\n        return {...state, cart:action.payload, loading:false}   //because the cart is setting in action.payload in the \"DISPLAY_ITEMS\"--we add loading:false so it can show the carts\r\n    }\r\n    if(action.type === \"TOGGLE_AMOUNT\" ){\r\n        let tempCart = state.cart.map((cartItem)=>{\r\n            if(cartItem.id === action.payload.id){\r\n                //check the type (increase /decrease)\r\n                if(action.payload.type === \"inc\"){\r\n                    return ({\r\n                        // an cartItem increase and others are the same\r\n                        ...cartItem,\r\n                        amount: cartItem.amount+1\r\n                    })\r\n                }if(action.payload.type === \"dec\"){\r\n                    return({\r\n                        ...cartItem,\r\n                        amount: cartItem.amount-1\r\n                    })\r\n                }\r\n            }else{\r\n                return cartItem\r\n            }\r\n        })   //in tempCart we check if the value is increasing or decreasing\r\n        .filter((cartItem) =>cartItem.amount !== 0)   //it's not showing the items more than 0\r\n        return{...state,cart:tempCart}\r\n    }\r\n    //throw an error so if some dispatch is not familiar it gives us an error-E.g. if we add dispatch({type:\"RANDOM\"}) in context.js then it gives us this type error \r\n    throw new Error(\"no matching action type\") \r\n}\r\n\r\nexport default reducer","import React, { useState, useContext, useReducer, useEffect } from 'react'\r\nimport cartItems from './data'\r\nimport reducer from './reducer'\r\nconst url = 'https://course-api.com/react-useReducer-cart-project'\r\nconst AppContext = React.createContext()\r\n\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const fetchData = async () => {\r\n    dispatch({ type: 'LOADING' })\r\n    const response = await fetch(url)\r\n    const cart = await response.json()\r\n    dispatch({ type: 'DISPLAY_ITEMS', payload: cart })\r\n  }\r\n\r\n  //since we use fetch for API we need useEffect with empty [] since we want to receive data one time\r\n  useEffect(()=>{\r\n    fetchData()\r\n  },[])\r\n\r\n  const toggleAmount = (id,type) =>{  //type means what we are doing (increase or decrease)\r\n    dispatch({type:\"TOGGLE_AMOUNT\",payload:{id,type}})  //in this function payload is an object\r\n  }\r\n\r\n  //define initialState of the state\r\n  const initialState = {\r\n    loading: false,\r\n    cart: cartItems,\r\n    total: 0,\r\n    amount:0  //the top right amount on the UI\r\n  }\r\n\r\n  const [state,dispatch] = useReducer(reducer, initialState)\r\n  //remove all the items\r\n  const clearCart = () =>{\r\n    dispatch({type:\"CLEAR_CART\"})\r\n  }\r\n\r\n  //remove each item--we need id to remove each item--we need to pass id to some name, we chose playload for name\r\n  const remove = (id) =>{\r\n    dispatch({type:\"REMOVE\", payload:id})\r\n  }\r\n\r\n  //cart in state is constantly change\r\n  useEffect(()=>{\r\n    dispatch({type:'GET_TOTALS'})\r\n  },[state.cart])\r\n      \r\n  return (\r\n    <AppContext.Provider\r\n    // ... is used because we should transfer all the object properties too\r\n      value={{\r\n        ...state,\r\n        clearCart,\r\n        remove,\r\n        toggleAmount\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext)\r\n}\r\n\r\nexport { AppContext, AppProvider }\r\n","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\nconst Navbar = () => {\r\n  const {amount} = useGlobalContext()\r\n  return (\r\n    <nav>\r\n      <div className='nav-center'>\r\n        <h3>useReducer</h3>\r\n        <div className='nav-container'>\r\n          <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>\r\n            <path d='M16 6v2h2l2 12H0L2 8h2V6a6 6 0 1 1 12 0zm-2 0a4 4 0 1 0-8 0v2h8V6zM4 10v2h2v-2H4zm10 0v2h2v-2h-2z' />\r\n          </svg>\r\n          <div className='amount-container'>\r\n            <p className='total-amount'>{amount}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\nconst CartItem = ({ id, img, title, price, amount }) => {\r\n  const {remove,toggleAmount} = useGlobalContext()\r\n  return (\r\n    <article className='cart-item'>\r\n      <img src={img} alt={title} />\r\n      <div>\r\n        <h4>{title}</h4>\r\n        <h4 className='item-price'>${price}</h4>\r\n        {/* remove button */}\r\n        <button\r\n          className='remove-btn'\r\n          // since we want to pass the id to the remove function,we should write a onClick function\r\n          onClick={() => remove(id)}\r\n        >\r\n          remove\r\n        </button>\r\n      </div>\r\n      <div>\r\n        {/* increase amount */}\r\n        <button className='amount-btn' onClick={() => toggleAmount(id,\"inc\")}>\r\n          <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>\r\n            <path d='M10.707 7.05L10 6.343 4.343 12l1.414 1.414L10 9.172l4.243 4.242L15.657 12z' />\r\n          </svg>\r\n        </button>\r\n        {/* amount */}\r\n        <p className='amount'>{amount}</p>\r\n        {/* decrease amount */}\r\n        <button className='amount-btn' onClick={() => toggleAmount(id,\"dec\")}>\r\n          <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'>\r\n            <path d='M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z' />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default CartItem\r\n","import React from 'react'\r\nimport CartItem from './CartItem'\r\nimport { useGlobalContext } from './context'\r\n\r\nconst CartContainer = () => {\r\n  const { cart,total,clearCart } = useGlobalContext()\r\n\r\n  {/* when the bag is completly empty */}\r\n  if (cart.length === 0) {\r\n    return (\r\n      <section className='cart'>\r\n        {/* cart header */}\r\n        <header>\r\n          <h2>your bag</h2>\r\n          <h4 className='empty-cart'>is currently empty</h4>  \r\n        </header>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  //when the bag has item(s)\r\n  return (\r\n    <section className='cart'>\r\n      {/* cart header */}\r\n      <header>\r\n        <h2>your bag</h2>\r\n      </header>\r\n      {/* cart items */}\r\n      <div>\r\n        {cart.map((item) => {\r\n          return <CartItem key={item.id} {...item} />\r\n        })}\r\n      </div>\r\n      {/* cart footer */}\r\n      <footer>\r\n        <hr />\r\n        <div className='cart-total'>\r\n          <h4>\r\n            total <span>{total}</span>\r\n          </h4>\r\n        </div>\r\n        <button\r\n          className='btn clear-btn'\r\n          onClick={clearCart}\r\n        >\r\n          clear cart\r\n        </button>\r\n      </footer>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CartContainer\r\n","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\n\r\n// components\r\nimport Navbar from './Navbar'\r\nimport CartContainer from './CartContainer'\r\n\r\nfunction App() {\r\n  const{loading} = useGlobalContext()\r\n  if (loading) {\r\n    return (\r\n      <div className='loading'>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    )\r\n  }\r\n  //once we receive the data we have the lines below\r\n  return (\r\n    <main>\r\n      <Navbar />\r\n      <CartContainer />\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { AppProvider } from './context'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}